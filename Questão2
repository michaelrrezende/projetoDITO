Query:

SELECT percentile_cont(QtdeDiasEntreDatas,0.50) over () AS Mediana
FROM (SELECT TB1.id,DATE_DIFF(TB2.data_proxima_compra,TB1.data_compra, DAY) AS QtdeDiasEntreDatas
FROM (SELECT DISTINCT id, data_compra, ROW_NUMBER() OVER (PARTITION BY id ORDER BY data_compra ASC) AS rk
FROM (SELECT Distinct TAB1.id, DATE(TAB1.timestamp) AS data_compra 
FROM `dito-data-scientist-challenge.tracking.dito` AS TAB1
WHERE TAB1.type = 'track'
ORDER BY TAB1.id, data_compra ASC)
ORDER BY id, rk ASC) AS TB1
LEFT JOIN ((SELECT DISTINCT id, data_compra AS data_proxima_compra, 
    ROW_NUMBER() OVER (PARTITION BY id ORDER BY data_compra ASC) AS Seq
    FROM (SELECT id, data_compra
     ,ROW_NUMBER() OVER (PARTITION BY id ORDER BY data_compra ASC) AS rk
    FROM (SELECT DISTINCT TAB1.id, DATE(TAB1.timestamp) AS data_compra 
    FROM `dito-data-scientist-challenge.tracking.dito` AS TAB1
    WHERE TAB1.type = 'track'
    ORDER BY TAB1.id, data_compra ASC)
    ORDER BY id, rk ASC)
    WHERE rk > 1 )) AS TB2
    ON TB1.id = TB2.id AND TB1.rk = TB2.Seq
ORDER BY TB1.id, TB1.data_compra ASC)
WHERE QtdeDiasEntreDatas IS NOT NULL
LIMIT 1

Resultado:

Linha|Mediana	
1|2.0

Como fiz:

Primeiro tinha que calcular a data da segunda compra, excluindo a primeira data, pois não importava naquele momento. Criei então um "id"
para a próxima data de acordo com o cliente, depois disso, fiz um left join indicando a "id" que havia criado anteriormente, assim criei
como se a segunda data fosse a primeira, a terceira fosse a segunda, e assim por diante, deixando assim a data anterior relacionada. Após
isso, criei os "sub selects", onde fiz uma diferença entre as datas para calcular dentro da ID de cada cliente e outro para calcular a
mediana de todas as datas, independente da ID do cliente. Assim, finalizei com uma mediana de dois dias, que significa que em média as
pessoas compram de 2 em 2 dias.
